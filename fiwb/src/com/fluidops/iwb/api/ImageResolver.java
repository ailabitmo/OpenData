/*
 * Copyright (C) 2008-2012, fluid Operations AG
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.

 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package com.fluidops.iwb.api;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.openrdf.model.URI;
import org.openrdf.model.Value;
import org.openrdf.model.impl.ValueFactoryImpl;

import com.fluidops.iwb.Global;
import com.fluidops.iwb.cache.ImageFileCache;
import com.fluidops.iwb.cms.util.IWBCmsUtil;
import com.fluidops.iwb.model.Vocabulary;
import com.fluidops.security.XssSafeHttpRequest;
import com.fluidops.util.StringUtil;

public class ImageResolver
{
    protected static final Logger logger = Logger.getLogger(ImageResolver.class.getName());
    
    /**
     * The property file used for resolving images, if any.
     * May be null or empty; in such cases, only literals and URIs
     * that represent an image (which is determined by suffix)
     * will be resolved.
     */
    private String imageResolveFile;

    /**
     * True if the image resolver should check if THUMBNAIL
     * properties are specified for the given value.
     */
    private boolean resolveByProperty;
    
    /**
     * Internal mapping from image names to their location
     */
    private Map<String,String> im;
    
    /**
     * list containing all properties which should be resolved as images
     */
    private List<URI> imageProperties = new ArrayList<URI>();
    
    /**
     * 
     * @param imageResolveFile
     * @param resolveByProperty
     */
    public ImageResolver(String imageResolveFile, boolean resolveByProperty)
    {
    	// order decides about preference if several of the properties are set
        imageProperties.add(Vocabulary.FOAF.IMG);
        imageProperties.add(Vocabulary.DBPEDIA_ONT.THUMBNAIL);
        imageProperties.add(Vocabulary.FOAF.LOGO);
        imageProperties.add(Vocabulary.FOAF.DEPICTION);
        this.imageResolveFile = imageResolveFile==null?"":imageResolveFile;
        this.resolveByProperty = resolveByProperty;
        
        // initialize internal mapping
        im = (imageResolveFile!=null && !imageResolveFile.equals(""))?
                ImageFileCache.getInstance().getImageMappings(imageResolveFile):null;
    }
    
    /**
     * @param value The value to lookup
     * @return Image enclodes in <img>-tags or null if no image associated
     */
    public String resolveImageAsThumbnail(Value value)
    {
        String link = resolveImage(value);
        if (link==null || link.isEmpty())
            return null;
        else
           	return thumbnailString(link, "", ReadDataManagerImpl.getDataManager(Global.repository).getLabel(value));
    }

    /**
     * @param value
     *            The value to lookup
     * @return Image enclodes in <img>-tags or null if no image associated
     * @note the image URL generated by this method might be vulnerable for
     *       introducing XSS code; check its output carefully before sending to
     *       the browser.
     */
    public String resolveImage(Value value)
    {
        if (value==null)
            return null;
        String valueStr = value.stringValue();
        
        // STEP 1: try to resolve image according to image file
        if (!imageResolveFile.equals(""))
        {
            String val = im.get(valueStr);
            if (val!=null)
                return val;
        }
        
        // STEP 2
        // resolve the path to the uploaded images (e.g. 'File:Picture.png')
		if(valueStr.startsWith(EndpointImpl.api().getNamespaceService().fileNamespace()))
		{
			String img = IWBCmsUtil.getAccessUrl(ValueFactoryImpl.getInstance().createURI(valueStr));
			
			return img;
		}
        
        // STEP 3: if not resolvable by image file, check if the
        // value represents an image by itself
        if (isImage(valueStr))
            return valueStr;

        // STEP 4
        if (resolveByProperty && value instanceof URI)
        {
            ReadDataManager dm = EndpointImpl.api().getDataManager();

            String img = dm.getValueForProperties((URI)value, imageProperties);
            
            return img;
        }
        
        return null; // resolving failed
    }
    
    /**
     * Returns the thumbnail string obtained by enclosing the link into <img>-tags
     * 
     * @param link
     * @param value 
     * @return
     */
    public static String thumbnailString(String link)
    {
        // safety measure: best case, double quotes would
        // only break the HTML; worst case they are adversary (XSS)
        link = XssSafeHttpRequest.cleanXSS(link);

    	if (link.isEmpty())
    		return "";
        return "<img src=\"" + link + "\" height=\"20px\" />";
    }

    /**
     * Returns the thumbnail string obtained by enclosing the link into <img>-tags
     * 
     * @param link
     * @return
     */
    public static String thumbnailString(String link, String height, String title)
    {
        // safety measure: best case, double quotes would
        // only break the HTML; worst case they are adversary (XSS)
    	height = StringUtil.isNotNullNorEmpty(height) ? height : "20px";
        link = XssSafeHttpRequest.cleanXSS(link);
        height = XssSafeHttpRequest.cleanXSS(height);
        title = XssSafeHttpRequest.cleanXSS(title);

    	if (link.isEmpty())
    		return "";
        return "<img title='"+title+"' src=\"" + link + "\" height=\"" + height + "\" />";
    }

    
    /**
     * Returns the image string obtained by enclosing the link into <img>-tags
     * 
     * @param link
     * @return
     */
    public static String imageString(String link)
    {
        // safety measure: best case, single quotes would
        // only break the HTML; worst case they are adversary (XSS)
        link = XssSafeHttpRequest.cleanXSS(link);

    	if (link.isEmpty())
    		return "";
        return "<img src='" + link + "' alt='" + link + "' />";
    }
    
    /** 
     * Checks if the string represents an image (according to its file ending).
     * 
     * @param s
     * @return
     */
    public static boolean isImage(String s)
    {
        if (s==null)
            return false;
        s = s.toLowerCase();
        if ( s.endsWith( ".png" ) )
            return true;
        if ( s.endsWith( ".gif" ) )
            return true;
        if ( s.endsWith( ".jpg" ) )
            return true;
        if ( s.endsWith( ".jpeg" ) )
            return true;
        return false;
    }
}
